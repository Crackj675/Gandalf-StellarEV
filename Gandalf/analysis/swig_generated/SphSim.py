# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SphSim', [dirname(__file__)])
        except ImportError:
            import _SphSim
            return _SphSim
        if fp is not None:
            try:
                _mod = imp.load_module('_SphSim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SphSim = swig_import_helper()
    del swig_import_helper
else:
    import _SphSim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SphSim.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _SphSim.SwigPyIterator_value(self)
    def incr(self, n=1): return _SphSim.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _SphSim.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _SphSim.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _SphSim.SwigPyIterator_equal(self, *args)
    def copy(self): return _SphSim.SwigPyIterator_copy(self)
    def next(self): return _SphSim.SwigPyIterator_next(self)
    def __next__(self): return _SphSim.SwigPyIterator___next__(self)
    def previous(self): return _SphSim.SwigPyIterator_previous(self)
    def advance(self, *args): return _SphSim.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _SphSim.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _SphSim.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _SphSim.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _SphSim.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _SphSim.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _SphSim.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _SphSim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class map_string_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_int, name)
    __repr__ = _swig_repr
    def iterator(self): return _SphSim.map_string_int_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SphSim.map_string_int___nonzero__(self)
    def __bool__(self): return _SphSim.map_string_int___bool__(self)
    def __len__(self): return _SphSim.map_string_int___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _SphSim.map_string_int___getitem__(self, *args)
    def __delitem__(self, *args): return _SphSim.map_string_int___delitem__(self, *args)
    def has_key(self, *args): return _SphSim.map_string_int_has_key(self, *args)
    def keys(self): return _SphSim.map_string_int_keys(self)
    def values(self): return _SphSim.map_string_int_values(self)
    def items(self): return _SphSim.map_string_int_items(self)
    def __contains__(self, *args): return _SphSim.map_string_int___contains__(self, *args)
    def key_iterator(self): return _SphSim.map_string_int_key_iterator(self)
    def value_iterator(self): return _SphSim.map_string_int_value_iterator(self)
    def __setitem__(self, *args): return _SphSim.map_string_int___setitem__(self, *args)
    def asdict(self): return _SphSim.map_string_int_asdict(self)
    def __init__(self, *args): 
        this = _SphSim.new_map_string_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _SphSim.map_string_int_empty(self)
    def size(self): return _SphSim.map_string_int_size(self)
    def clear(self): return _SphSim.map_string_int_clear(self)
    def swap(self, *args): return _SphSim.map_string_int_swap(self, *args)
    def get_allocator(self): return _SphSim.map_string_int_get_allocator(self)
    def begin(self): return _SphSim.map_string_int_begin(self)
    def end(self): return _SphSim.map_string_int_end(self)
    def rbegin(self): return _SphSim.map_string_int_rbegin(self)
    def rend(self): return _SphSim.map_string_int_rend(self)
    def count(self, *args): return _SphSim.map_string_int_count(self, *args)
    def erase(self, *args): return _SphSim.map_string_int_erase(self, *args)
    def find(self, *args): return _SphSim.map_string_int_find(self, *args)
    def lower_bound(self, *args): return _SphSim.map_string_int_lower_bound(self, *args)
    def upper_bound(self, *args): return _SphSim.map_string_int_upper_bound(self, *args)
    __swig_destroy__ = _SphSim.delete_map_string_int
    __del__ = lambda self : None;
map_string_int_swigregister = _SphSim.map_string_int_swigregister
map_string_int_swigregister(map_string_int)

class map_string_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_string, name)
    __repr__ = _swig_repr
    def iterator(self): return _SphSim.map_string_string_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SphSim.map_string_string___nonzero__(self)
    def __bool__(self): return _SphSim.map_string_string___bool__(self)
    def __len__(self): return _SphSim.map_string_string___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _SphSim.map_string_string___getitem__(self, *args)
    def __delitem__(self, *args): return _SphSim.map_string_string___delitem__(self, *args)
    def has_key(self, *args): return _SphSim.map_string_string_has_key(self, *args)
    def keys(self): return _SphSim.map_string_string_keys(self)
    def values(self): return _SphSim.map_string_string_values(self)
    def items(self): return _SphSim.map_string_string_items(self)
    def __contains__(self, *args): return _SphSim.map_string_string___contains__(self, *args)
    def key_iterator(self): return _SphSim.map_string_string_key_iterator(self)
    def value_iterator(self): return _SphSim.map_string_string_value_iterator(self)
    def __setitem__(self, *args): return _SphSim.map_string_string___setitem__(self, *args)
    def asdict(self): return _SphSim.map_string_string_asdict(self)
    def __init__(self, *args): 
        this = _SphSim.new_map_string_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _SphSim.map_string_string_empty(self)
    def size(self): return _SphSim.map_string_string_size(self)
    def clear(self): return _SphSim.map_string_string_clear(self)
    def swap(self, *args): return _SphSim.map_string_string_swap(self, *args)
    def get_allocator(self): return _SphSim.map_string_string_get_allocator(self)
    def begin(self): return _SphSim.map_string_string_begin(self)
    def end(self): return _SphSim.map_string_string_end(self)
    def rbegin(self): return _SphSim.map_string_string_rbegin(self)
    def rend(self): return _SphSim.map_string_string_rend(self)
    def count(self, *args): return _SphSim.map_string_string_count(self, *args)
    def erase(self, *args): return _SphSim.map_string_string_erase(self, *args)
    def find(self, *args): return _SphSim.map_string_string_find(self, *args)
    def lower_bound(self, *args): return _SphSim.map_string_string_lower_bound(self, *args)
    def upper_bound(self, *args): return _SphSim.map_string_string_upper_bound(self, *args)
    __swig_destroy__ = _SphSim.delete_map_string_string
    __del__ = lambda self : None;
map_string_string_swigregister = _SphSim.map_string_string_swigregister
map_string_string_swigregister(map_string_string)

class map_string_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_float, name)
    __repr__ = _swig_repr
    def iterator(self): return _SphSim.map_string_float_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SphSim.map_string_float___nonzero__(self)
    def __bool__(self): return _SphSim.map_string_float___bool__(self)
    def __len__(self): return _SphSim.map_string_float___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _SphSim.map_string_float___getitem__(self, *args)
    def __delitem__(self, *args): return _SphSim.map_string_float___delitem__(self, *args)
    def has_key(self, *args): return _SphSim.map_string_float_has_key(self, *args)
    def keys(self): return _SphSim.map_string_float_keys(self)
    def values(self): return _SphSim.map_string_float_values(self)
    def items(self): return _SphSim.map_string_float_items(self)
    def __contains__(self, *args): return _SphSim.map_string_float___contains__(self, *args)
    def key_iterator(self): return _SphSim.map_string_float_key_iterator(self)
    def value_iterator(self): return _SphSim.map_string_float_value_iterator(self)
    def __setitem__(self, *args): return _SphSim.map_string_float___setitem__(self, *args)
    def asdict(self): return _SphSim.map_string_float_asdict(self)
    def __init__(self, *args): 
        this = _SphSim.new_map_string_float(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _SphSim.map_string_float_empty(self)
    def size(self): return _SphSim.map_string_float_size(self)
    def clear(self): return _SphSim.map_string_float_clear(self)
    def swap(self, *args): return _SphSim.map_string_float_swap(self, *args)
    def get_allocator(self): return _SphSim.map_string_float_get_allocator(self)
    def begin(self): return _SphSim.map_string_float_begin(self)
    def end(self): return _SphSim.map_string_float_end(self)
    def rbegin(self): return _SphSim.map_string_float_rbegin(self)
    def rend(self): return _SphSim.map_string_float_rend(self)
    def count(self, *args): return _SphSim.map_string_float_count(self, *args)
    def erase(self, *args): return _SphSim.map_string_float_erase(self, *args)
    def find(self, *args): return _SphSim.map_string_float_find(self, *args)
    def lower_bound(self, *args): return _SphSim.map_string_float_lower_bound(self, *args)
    def upper_bound(self, *args): return _SphSim.map_string_float_upper_bound(self, *args)
    __swig_destroy__ = _SphSim.delete_map_string_float
    __del__ = lambda self : None;
map_string_float_swigregister = _SphSim.map_string_float_swigregister
map_string_float_swigregister(map_string_float)

class list_snap_base_pointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_snap_base_pointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_snap_base_pointer, name)
    __repr__ = _swig_repr
    def iterator(self): return _SphSim.list_snap_base_pointer_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SphSim.list_snap_base_pointer___nonzero__(self)
    def __bool__(self): return _SphSim.list_snap_base_pointer___bool__(self)
    def __len__(self): return _SphSim.list_snap_base_pointer___len__(self)
    def pop(self): return _SphSim.list_snap_base_pointer_pop(self)
    def __getslice__(self, *args): return _SphSim.list_snap_base_pointer___getslice__(self, *args)
    def __setslice__(self, *args): return _SphSim.list_snap_base_pointer___setslice__(self, *args)
    def __delslice__(self, *args): return _SphSim.list_snap_base_pointer___delslice__(self, *args)
    def __delitem__(self, *args): return _SphSim.list_snap_base_pointer___delitem__(self, *args)
    def __getitem__(self, *args): return _SphSim.list_snap_base_pointer___getitem__(self, *args)
    def __setitem__(self, *args): return _SphSim.list_snap_base_pointer___setitem__(self, *args)
    def append(self, *args): return _SphSim.list_snap_base_pointer_append(self, *args)
    def empty(self): return _SphSim.list_snap_base_pointer_empty(self)
    def size(self): return _SphSim.list_snap_base_pointer_size(self)
    def clear(self): return _SphSim.list_snap_base_pointer_clear(self)
    def swap(self, *args): return _SphSim.list_snap_base_pointer_swap(self, *args)
    def get_allocator(self): return _SphSim.list_snap_base_pointer_get_allocator(self)
    def begin(self): return _SphSim.list_snap_base_pointer_begin(self)
    def end(self): return _SphSim.list_snap_base_pointer_end(self)
    def rbegin(self): return _SphSim.list_snap_base_pointer_rbegin(self)
    def rend(self): return _SphSim.list_snap_base_pointer_rend(self)
    def pop_back(self): return _SphSim.list_snap_base_pointer_pop_back(self)
    def erase(self, *args): return _SphSim.list_snap_base_pointer_erase(self, *args)
    def __init__(self, *args): 
        this = _SphSim.new_list_snap_base_pointer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SphSim.list_snap_base_pointer_push_back(self, *args)
    def front(self): return _SphSim.list_snap_base_pointer_front(self)
    def back(self): return _SphSim.list_snap_base_pointer_back(self)
    def assign(self, *args): return _SphSim.list_snap_base_pointer_assign(self, *args)
    def resize(self, *args): return _SphSim.list_snap_base_pointer_resize(self, *args)
    def insert(self, *args): return _SphSim.list_snap_base_pointer_insert(self, *args)
    def pop_front(self): return _SphSim.list_snap_base_pointer_pop_front(self)
    def push_front(self, *args): return _SphSim.list_snap_base_pointer_push_front(self, *args)
    def remove(self, *args): return _SphSim.list_snap_base_pointer_remove(self, *args)
    def unique(self): return _SphSim.list_snap_base_pointer_unique(self)
    def reverse(self): return _SphSim.list_snap_base_pointer_reverse(self)
    def sort(self): return _SphSim.list_snap_base_pointer_sort(self)
    def merge(self, *args): return _SphSim.list_snap_base_pointer_merge(self, *args)
    __swig_destroy__ = _SphSim.delete_list_snap_base_pointer
    __del__ = lambda self : None;
list_snap_base_pointer_swigregister = _SphSim.list_snap_base_pointer_swigregister
list_snap_base_pointer_swigregister(list_snap_base_pointer)

class list_strings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_strings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_strings, name)
    __repr__ = _swig_repr
    def iterator(self): return _SphSim.list_strings_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _SphSim.list_strings___nonzero__(self)
    def __bool__(self): return _SphSim.list_strings___bool__(self)
    def __len__(self): return _SphSim.list_strings___len__(self)
    def pop(self): return _SphSim.list_strings_pop(self)
    def __getslice__(self, *args): return _SphSim.list_strings___getslice__(self, *args)
    def __setslice__(self, *args): return _SphSim.list_strings___setslice__(self, *args)
    def __delslice__(self, *args): return _SphSim.list_strings___delslice__(self, *args)
    def __delitem__(self, *args): return _SphSim.list_strings___delitem__(self, *args)
    def __getitem__(self, *args): return _SphSim.list_strings___getitem__(self, *args)
    def __setitem__(self, *args): return _SphSim.list_strings___setitem__(self, *args)
    def append(self, *args): return _SphSim.list_strings_append(self, *args)
    def empty(self): return _SphSim.list_strings_empty(self)
    def size(self): return _SphSim.list_strings_size(self)
    def clear(self): return _SphSim.list_strings_clear(self)
    def swap(self, *args): return _SphSim.list_strings_swap(self, *args)
    def get_allocator(self): return _SphSim.list_strings_get_allocator(self)
    def begin(self): return _SphSim.list_strings_begin(self)
    def end(self): return _SphSim.list_strings_end(self)
    def rbegin(self): return _SphSim.list_strings_rbegin(self)
    def rend(self): return _SphSim.list_strings_rend(self)
    def pop_back(self): return _SphSim.list_strings_pop_back(self)
    def erase(self, *args): return _SphSim.list_strings_erase(self, *args)
    def __init__(self, *args): 
        this = _SphSim.new_list_strings(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _SphSim.list_strings_push_back(self, *args)
    def front(self): return _SphSim.list_strings_front(self)
    def back(self): return _SphSim.list_strings_back(self)
    def assign(self, *args): return _SphSim.list_strings_assign(self, *args)
    def resize(self, *args): return _SphSim.list_strings_resize(self, *args)
    def insert(self, *args): return _SphSim.list_strings_insert(self, *args)
    def pop_front(self): return _SphSim.list_strings_pop_front(self)
    def push_front(self, *args): return _SphSim.list_strings_push_front(self, *args)
    def reverse(self): return _SphSim.list_strings_reverse(self)
    __swig_destroy__ = _SphSim.delete_list_strings
    __del__ = lambda self : None;
list_strings_swigregister = _SphSim.list_strings_swigregister
list_strings_swigregister(list_strings)

class HeaderInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeaderInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeaderInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Nhydro"] = _SphSim.HeaderInfo_Nhydro_set
    __swig_getmethods__["Nhydro"] = _SphSim.HeaderInfo_Nhydro_get
    if _newclass:Nhydro = _swig_property(_SphSim.HeaderInfo_Nhydro_get, _SphSim.HeaderInfo_Nhydro_set)
    __swig_setmethods__["Nstar"] = _SphSim.HeaderInfo_Nstar_set
    __swig_getmethods__["Nstar"] = _SphSim.HeaderInfo_Nstar_get
    if _newclass:Nstar = _swig_property(_SphSim.HeaderInfo_Nstar_get, _SphSim.HeaderInfo_Nstar_set)
    __swig_setmethods__["Ndust"] = _SphSim.HeaderInfo_Ndust_set
    __swig_getmethods__["Ndust"] = _SphSim.HeaderInfo_Ndust_get
    if _newclass:Ndust = _swig_property(_SphSim.HeaderInfo_Ndust_get, _SphSim.HeaderInfo_Ndust_set)
    __swig_setmethods__["ndim"] = _SphSim.HeaderInfo_ndim_set
    __swig_getmethods__["ndim"] = _SphSim.HeaderInfo_ndim_get
    if _newclass:ndim = _swig_property(_SphSim.HeaderInfo_ndim_get, _SphSim.HeaderInfo_ndim_set)
    __swig_setmethods__["t"] = _SphSim.HeaderInfo_t_set
    __swig_getmethods__["t"] = _SphSim.HeaderInfo_t_get
    if _newclass:t = _swig_property(_SphSim.HeaderInfo_t_get, _SphSim.HeaderInfo_t_set)
    def __init__(self): 
        this = _SphSim.new_HeaderInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SphSim.delete_HeaderInfo
    __del__ = lambda self : None;
HeaderInfo_swigregister = _SphSim.HeaderInfo_swigregister
HeaderInfo_swigregister(HeaderInfo)

exact = _SphSim.exact
hllc = _SphSim.hllc
class ShocktubeSolution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShocktubeSolution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShocktubeSolution, name)
    __repr__ = _swig_repr
    __swig_getmethods__["nvalues"] = _SphSim.ShocktubeSolution_nvalues_get
    if _newclass:nvalues = _swig_property(_SphSim.ShocktubeSolution_nvalues_get)
    __swig_getmethods__["gamma"] = _SphSim.ShocktubeSolution_gamma_get
    if _newclass:gamma = _swig_property(_SphSim.ShocktubeSolution_gamma_get)
    __swig_getmethods__["pl"] = _SphSim.ShocktubeSolution_pl_get
    if _newclass:pl = _swig_property(_SphSim.ShocktubeSolution_pl_get)
    __swig_getmethods__["pr"] = _SphSim.ShocktubeSolution_pr_get
    if _newclass:pr = _swig_property(_SphSim.ShocktubeSolution_pr_get)
    __swig_getmethods__["rhol"] = _SphSim.ShocktubeSolution_rhol_get
    if _newclass:rhol = _swig_property(_SphSim.ShocktubeSolution_rhol_get)
    __swig_getmethods__["rhor"] = _SphSim.ShocktubeSolution_rhor_get
    if _newclass:rhor = _swig_property(_SphSim.ShocktubeSolution_rhor_get)
    __swig_getmethods__["t"] = _SphSim.ShocktubeSolution_t_get
    if _newclass:t = _swig_property(_SphSim.ShocktubeSolution_t_get)
    __swig_getmethods__["vl"] = _SphSim.ShocktubeSolution_vl_get
    if _newclass:vl = _swig_property(_SphSim.ShocktubeSolution_vl_get)
    __swig_getmethods__["vr"] = _SphSim.ShocktubeSolution_vr_get
    if _newclass:vr = _swig_property(_SphSim.ShocktubeSolution_vr_get)
    __swig_getmethods__["x0"] = _SphSim.ShocktubeSolution_x0_get
    if _newclass:x0 = _swig_property(_SphSim.ShocktubeSolution_x0_get)
    __swig_getmethods__["xl"] = _SphSim.ShocktubeSolution_xl_get
    if _newclass:xl = _swig_property(_SphSim.ShocktubeSolution_xl_get)
    __swig_getmethods__["xr"] = _SphSim.ShocktubeSolution_xr_get
    if _newclass:xr = _swig_property(_SphSim.ShocktubeSolution_xr_get)
    __swig_setmethods__["pstar"] = _SphSim.ShocktubeSolution_pstar_set
    __swig_getmethods__["pstar"] = _SphSim.ShocktubeSolution_pstar_get
    if _newclass:pstar = _swig_property(_SphSim.ShocktubeSolution_pstar_get, _SphSim.ShocktubeSolution_pstar_set)
    __swig_setmethods__["ustar"] = _SphSim.ShocktubeSolution_ustar_set
    __swig_getmethods__["ustar"] = _SphSim.ShocktubeSolution_ustar_get
    if _newclass:ustar = _swig_property(_SphSim.ShocktubeSolution_ustar_get, _SphSim.ShocktubeSolution_ustar_set)
    __swig_setmethods__["riemann"] = _SphSim.ShocktubeSolution_riemann_set
    __swig_getmethods__["riemann"] = _SphSim.ShocktubeSolution_riemann_get
    if _newclass:riemann = _swig_property(_SphSim.ShocktubeSolution_riemann_get, _SphSim.ShocktubeSolution_riemann_set)
    def __init__(self, *args): 
        this = _SphSim.new_ShocktubeSolution(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SphSim.delete_ShocktubeSolution
    __del__ = lambda self : None;
    def ComputeShocktubeSolution(self, *args): return _SphSim.ShocktubeSolution_ComputeShocktubeSolution(self, *args)
    single = _SphSim.ShocktubeSolution_single
ShocktubeSolution_swigregister = _SphSim.ShocktubeSolution_swigregister
ShocktubeSolution_swigregister(ShocktubeSolution)

class SimulationBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["SimulationFactory"] = lambda x: _SphSim.SimulationBase_SimulationFactory
    if _newclass:SimulationFactory = staticmethod(_SphSim.SimulationBase_SimulationFactory)
    __swig_destroy__ = _SphSim.delete_SimulationBase
    __del__ = lambda self : None;
    def GetIntAndFloatParameterKeys(self): return _SphSim.SimulationBase_GetIntAndFloatParameterKeys(self)
    def GetParam(self, *args): return _SphSim.SimulationBase_GetParam(self, *args)
    def InteractiveRun(self, *args): return _SphSim.SimulationBase_InteractiveRun(self, *args)
    def Output(self): return _SphSim.SimulationBase_Output(self)
    def RestartSnapshot(self): return _SphSim.SimulationBase_RestartSnapshot(self)
    def Run(self, *args): return _SphSim.SimulationBase_Run(self, *args)
    def SetParam(self, *args): return _SphSim.SimulationBase_SetParam(self, *args)
    def SetupSimulation(self): return _SphSim.SimulationBase_SetupSimulation(self)
    def SplashScreen(self, *args): return _SphSim.SimulationBase_SplashScreen(self, *args)
    def ImportArray(self, *args): return _SphSim.SimulationBase_ImportArray(self, *args)
    def MainLoop(self): return _SphSim.SimulationBase_MainLoop(self)
    def PostInitialConditionsSetup(self): return _SphSim.SimulationBase_PostInitialConditionsSetup(self)
    def PreSetupForPython(self): return _SphSim.SimulationBase_PreSetupForPython(self)
    def ProcessParameters(self): return _SphSim.SimulationBase_ProcessParameters(self)
    def SetComFrame(self): return _SphSim.SimulationBase_SetComFrame(self)
    def FinaliseSimulation(self): return _SphSim.SimulationBase_FinaliseSimulation(self)
    def GetInitialEnergy(self): return _SphSim.SimulationBase_GetInitialEnergy(self)
    def GetBlockTime(self, *args): return _SphSim.SimulationBase_GetBlockTime(self, *args)
    def ReadSnapshotFile(self, *args): return _SphSim.SimulationBase_ReadSnapshotFile(self, *args)
    def WriteSnapshotFile(self, *args): return _SphSim.SimulationBase_WriteSnapshotFile(self, *args)
    def ReadHeaderSnapshotFile(self, *args): return _SphSim.SimulationBase_ReadHeaderSnapshotFile(self, *args)
    __swig_setmethods__["ewaldGravity"] = _SphSim.SimulationBase_ewaldGravity_set
    __swig_getmethods__["ewaldGravity"] = _SphSim.SimulationBase_ewaldGravity_get
    if _newclass:ewaldGravity = _swig_property(_SphSim.SimulationBase_ewaldGravity_get, _SphSim.SimulationBase_ewaldGravity_set)
    __swig_setmethods__["extra_sink_output"] = _SphSim.SimulationBase_extra_sink_output_set
    __swig_getmethods__["extra_sink_output"] = _SphSim.SimulationBase_extra_sink_output_get
    if _newclass:extra_sink_output = _swig_property(_SphSim.SimulationBase_extra_sink_output_get, _SphSim.SimulationBase_extra_sink_output_set)
    __swig_setmethods__["initial_h_provided"] = _SphSim.SimulationBase_initial_h_provided_set
    __swig_getmethods__["initial_h_provided"] = _SphSim.SimulationBase_initial_h_provided_get
    if _newclass:initial_h_provided = _swig_property(_SphSim.SimulationBase_initial_h_provided_get, _SphSim.SimulationBase_initial_h_provided_set)
    __swig_setmethods__["kill_simulation"] = _SphSim.SimulationBase_kill_simulation_set
    __swig_getmethods__["kill_simulation"] = _SphSim.SimulationBase_kill_simulation_get
    if _newclass:kill_simulation = _swig_property(_SphSim.SimulationBase_kill_simulation_get, _SphSim.SimulationBase_kill_simulation_set)
    __swig_setmethods__["ParametersProcessed"] = _SphSim.SimulationBase_ParametersProcessed_set
    __swig_getmethods__["ParametersProcessed"] = _SphSim.SimulationBase_ParametersProcessed_get
    if _newclass:ParametersProcessed = _swig_property(_SphSim.SimulationBase_ParametersProcessed_get, _SphSim.SimulationBase_ParametersProcessed_set)
    __swig_setmethods__["periodicBoundaries"] = _SphSim.SimulationBase_periodicBoundaries_set
    __swig_getmethods__["periodicBoundaries"] = _SphSim.SimulationBase_periodicBoundaries_get
    if _newclass:periodicBoundaries = _swig_property(_SphSim.SimulationBase_periodicBoundaries_get, _SphSim.SimulationBase_periodicBoundaries_set)
    __swig_setmethods__["rebuild_tree"] = _SphSim.SimulationBase_rebuild_tree_set
    __swig_getmethods__["rebuild_tree"] = _SphSim.SimulationBase_rebuild_tree_get
    if _newclass:rebuild_tree = _swig_property(_SphSim.SimulationBase_rebuild_tree_get, _SphSim.SimulationBase_rebuild_tree_set)
    __swig_setmethods__["recomputeRadiation"] = _SphSim.SimulationBase_recomputeRadiation_set
    __swig_getmethods__["recomputeRadiation"] = _SphSim.SimulationBase_recomputeRadiation_get
    if _newclass:recomputeRadiation = _swig_property(_SphSim.SimulationBase_recomputeRadiation_get, _SphSim.SimulationBase_recomputeRadiation_set)
    __swig_setmethods__["rescale_particle_data"] = _SphSim.SimulationBase_rescale_particle_data_set
    __swig_getmethods__["rescale_particle_data"] = _SphSim.SimulationBase_rescale_particle_data_get
    if _newclass:rescale_particle_data = _swig_property(_SphSim.SimulationBase_rescale_particle_data_get, _SphSim.SimulationBase_rescale_particle_data_set)
    __swig_setmethods__["restart"] = _SphSim.SimulationBase_restart_set
    __swig_getmethods__["restart"] = _SphSim.SimulationBase_restart_get
    if _newclass:restart = _swig_property(_SphSim.SimulationBase_restart_get, _SphSim.SimulationBase_restart_set)
    __swig_setmethods__["setup"] = _SphSim.SimulationBase_setup_set
    __swig_getmethods__["setup"] = _SphSim.SimulationBase_setup_get
    if _newclass:setup = _swig_property(_SphSim.SimulationBase_setup_get, _SphSim.SimulationBase_setup_set)
    __swig_setmethods__["integration_step"] = _SphSim.SimulationBase_integration_step_set
    __swig_getmethods__["integration_step"] = _SphSim.SimulationBase_integration_step_get
    if _newclass:integration_step = _swig_property(_SphSim.SimulationBase_integration_step_get, _SphSim.SimulationBase_integration_step_set)
    __swig_setmethods__["litesnap"] = _SphSim.SimulationBase_litesnap_set
    __swig_getmethods__["litesnap"] = _SphSim.SimulationBase_litesnap_get
    if _newclass:litesnap = _swig_property(_SphSim.SimulationBase_litesnap_get, _SphSim.SimulationBase_litesnap_set)
    __swig_setmethods__["nbody_single_timestep"] = _SphSim.SimulationBase_nbody_single_timestep_set
    __swig_getmethods__["nbody_single_timestep"] = _SphSim.SimulationBase_nbody_single_timestep_get
    if _newclass:nbody_single_timestep = _swig_property(_SphSim.SimulationBase_nbody_single_timestep_get, _SphSim.SimulationBase_nbody_single_timestep_set)
    __swig_setmethods__["ndims"] = _SphSim.SimulationBase_ndims_set
    __swig_getmethods__["ndims"] = _SphSim.SimulationBase_ndims_get
    if _newclass:ndims = _swig_property(_SphSim.SimulationBase_ndims_get, _SphSim.SimulationBase_ndims_set)
    __swig_setmethods__["Nmpi"] = _SphSim.SimulationBase_Nmpi_set
    __swig_getmethods__["Nmpi"] = _SphSim.SimulationBase_Nmpi_get
    if _newclass:Nmpi = _swig_property(_SphSim.SimulationBase_Nmpi_get, _SphSim.SimulationBase_Nmpi_set)
    __swig_setmethods__["Noutsnap"] = _SphSim.SimulationBase_Noutsnap_set
    __swig_getmethods__["Noutsnap"] = _SphSim.SimulationBase_Noutsnap_get
    if _newclass:Noutsnap = _swig_property(_SphSim.SimulationBase_Noutsnap_get, _SphSim.SimulationBase_Noutsnap_set)
    __swig_setmethods__["Noutlitesnap"] = _SphSim.SimulationBase_Noutlitesnap_set
    __swig_getmethods__["Noutlitesnap"] = _SphSim.SimulationBase_Noutlitesnap_get
    if _newclass:Noutlitesnap = _swig_property(_SphSim.SimulationBase_Noutlitesnap_get, _SphSim.SimulationBase_Noutlitesnap_set)
    __swig_setmethods__["Nthreads"] = _SphSim.SimulationBase_Nthreads_set
    __swig_getmethods__["Nthreads"] = _SphSim.SimulationBase_Nthreads_get
    if _newclass:Nthreads = _swig_property(_SphSim.SimulationBase_Nthreads_get, _SphSim.SimulationBase_Nthreads_set)
    __swig_setmethods__["pruning_level_min"] = _SphSim.SimulationBase_pruning_level_min_set
    __swig_getmethods__["pruning_level_min"] = _SphSim.SimulationBase_pruning_level_min_get
    if _newclass:pruning_level_min = _swig_property(_SphSim.SimulationBase_pruning_level_min_get, _SphSim.SimulationBase_pruning_level_min_set)
    __swig_setmethods__["pruning_level_max"] = _SphSim.SimulationBase_pruning_level_max_set
    __swig_getmethods__["pruning_level_max"] = _SphSim.SimulationBase_pruning_level_max_get
    if _newclass:pruning_level_max = _swig_property(_SphSim.SimulationBase_pruning_level_max_get, _SphSim.SimulationBase_pruning_level_max_set)
    __swig_setmethods__["rank"] = _SphSim.SimulationBase_rank_set
    __swig_getmethods__["rank"] = _SphSim.SimulationBase_rank_get
    if _newclass:rank = _swig_property(_SphSim.SimulationBase_rank_get, _SphSim.SimulationBase_rank_set)
    __swig_setmethods__["sink_particles"] = _SphSim.SimulationBase_sink_particles_set
    __swig_getmethods__["sink_particles"] = _SphSim.SimulationBase_sink_particles_get
    if _newclass:sink_particles = _swig_property(_SphSim.SimulationBase_sink_particles_get, _SphSim.SimulationBase_sink_particles_set)
    __swig_setmethods__["hydro_single_timestep"] = _SphSim.SimulationBase_hydro_single_timestep_set
    __swig_getmethods__["hydro_single_timestep"] = _SphSim.SimulationBase_hydro_single_timestep_get
    if _newclass:hydro_single_timestep = _swig_property(_SphSim.SimulationBase_hydro_single_timestep_get, _SphSim.SimulationBase_hydro_single_timestep_set)
    __swig_setmethods__["level_diff_max"] = _SphSim.SimulationBase_level_diff_max_set
    __swig_getmethods__["level_diff_max"] = _SphSim.SimulationBase_level_diff_max_get
    if _newclass:level_diff_max = _swig_property(_SphSim.SimulationBase_level_diff_max_get, _SphSim.SimulationBase_level_diff_max_set)
    __swig_setmethods__["level_max"] = _SphSim.SimulationBase_level_max_set
    __swig_getmethods__["level_max"] = _SphSim.SimulationBase_level_max_get
    if _newclass:level_max = _swig_property(_SphSim.SimulationBase_level_max_get, _SphSim.SimulationBase_level_max_set)
    __swig_setmethods__["level_step"] = _SphSim.SimulationBase_level_step_set
    __swig_getmethods__["level_step"] = _SphSim.SimulationBase_level_step_get
    if _newclass:level_step = _swig_property(_SphSim.SimulationBase_level_step_get, _SphSim.SimulationBase_level_step_set)
    __swig_setmethods__["n"] = _SphSim.SimulationBase_n_set
    __swig_getmethods__["n"] = _SphSim.SimulationBase_n_get
    if _newclass:n = _swig_property(_SphSim.SimulationBase_n_get, _SphSim.SimulationBase_n_set)
    __swig_setmethods__["ndiagstep"] = _SphSim.SimulationBase_ndiagstep_set
    __swig_getmethods__["ndiagstep"] = _SphSim.SimulationBase_ndiagstep_get
    if _newclass:ndiagstep = _swig_property(_SphSim.SimulationBase_ndiagstep_get, _SphSim.SimulationBase_ndiagstep_set)
    __swig_setmethods__["nlastrestart"] = _SphSim.SimulationBase_nlastrestart_set
    __swig_getmethods__["nlastrestart"] = _SphSim.SimulationBase_nlastrestart_get
    if _newclass:nlastrestart = _swig_property(_SphSim.SimulationBase_nlastrestart_get, _SphSim.SimulationBase_nlastrestart_set)
    __swig_setmethods__["noutputstep"] = _SphSim.SimulationBase_noutputstep_set
    __swig_getmethods__["noutputstep"] = _SphSim.SimulationBase_noutputstep_get
    if _newclass:noutputstep = _swig_property(_SphSim.SimulationBase_noutputstep_get, _SphSim.SimulationBase_noutputstep_set)
    __swig_setmethods__["nradstep"] = _SphSim.SimulationBase_nradstep_set
    __swig_getmethods__["nradstep"] = _SphSim.SimulationBase_nradstep_get
    if _newclass:nradstep = _swig_property(_SphSim.SimulationBase_nradstep_get, _SphSim.SimulationBase_nradstep_set)
    __swig_setmethods__["nrestartstep"] = _SphSim.SimulationBase_nrestartstep_set
    __swig_getmethods__["nrestartstep"] = _SphSim.SimulationBase_nrestartstep_get
    if _newclass:nrestartstep = _swig_property(_SphSim.SimulationBase_nrestartstep_get, _SphSim.SimulationBase_nrestartstep_set)
    __swig_setmethods__["nresync"] = _SphSim.SimulationBase_nresync_set
    __swig_getmethods__["nresync"] = _SphSim.SimulationBase_nresync_get
    if _newclass:nresync = _swig_property(_SphSim.SimulationBase_nresync_get, _SphSim.SimulationBase_nresync_set)
    __swig_setmethods__["nsystembuildstep"] = _SphSim.SimulationBase_nsystembuildstep_set
    __swig_getmethods__["nsystembuildstep"] = _SphSim.SimulationBase_nsystembuildstep_get
    if _newclass:nsystembuildstep = _swig_property(_SphSim.SimulationBase_nsystembuildstep_get, _SphSim.SimulationBase_nsystembuildstep_set)
    __swig_setmethods__["ntreebuildstep"] = _SphSim.SimulationBase_ntreebuildstep_set
    __swig_getmethods__["ntreebuildstep"] = _SphSim.SimulationBase_ntreebuildstep_get
    if _newclass:ntreebuildstep = _swig_property(_SphSim.SimulationBase_ntreebuildstep_get, _SphSim.SimulationBase_ntreebuildstep_set)
    __swig_setmethods__["ntreestockstep"] = _SphSim.SimulationBase_ntreestockstep_set
    __swig_getmethods__["ntreestockstep"] = _SphSim.SimulationBase_ntreestockstep_get
    if _newclass:ntreestockstep = _swig_property(_SphSim.SimulationBase_ntreestockstep_get, _SphSim.SimulationBase_ntreestockstep_set)
    __swig_setmethods__["Nblocksteps"] = _SphSim.SimulationBase_Nblocksteps_set
    __swig_getmethods__["Nblocksteps"] = _SphSim.SimulationBase_Nblocksteps_get
    if _newclass:Nblocksteps = _swig_property(_SphSim.SimulationBase_Nblocksteps_get, _SphSim.SimulationBase_Nblocksteps_set)
    __swig_setmethods__["Nlevels"] = _SphSim.SimulationBase_Nlevels_set
    __swig_getmethods__["Nlevels"] = _SphSim.SimulationBase_Nlevels_get
    if _newclass:Nlevels = _swig_property(_SphSim.SimulationBase_Nlevels_get, _SphSim.SimulationBase_Nlevels_set)
    __swig_setmethods__["Nfullsteps"] = _SphSim.SimulationBase_Nfullsteps_set
    __swig_getmethods__["Nfullsteps"] = _SphSim.SimulationBase_Nfullsteps_get
    if _newclass:Nfullsteps = _swig_property(_SphSim.SimulationBase_Nfullsteps_get, _SphSim.SimulationBase_Nfullsteps_set)
    __swig_setmethods__["Nstepsmax"] = _SphSim.SimulationBase_Nstepsmax_set
    __swig_getmethods__["Nstepsmax"] = _SphSim.SimulationBase_Nstepsmax_get
    if _newclass:Nstepsmax = _swig_property(_SphSim.SimulationBase_Nstepsmax_get, _SphSim.SimulationBase_Nstepsmax_set)
    __swig_setmethods__["Nsteps"] = _SphSim.SimulationBase_Nsteps_set
    __swig_getmethods__["Nsteps"] = _SphSim.SimulationBase_Nsteps_get
    if _newclass:Nsteps = _swig_property(_SphSim.SimulationBase_Nsteps_get, _SphSim.SimulationBase_Nsteps_set)
    __swig_setmethods__["outflowTiming"] = _SphSim.SimulationBase_outflowTiming_set
    __swig_getmethods__["outflowTiming"] = _SphSim.SimulationBase_outflowTiming_get
    if _newclass:outflowTiming = _swig_property(_SphSim.SimulationBase_outflowTiming_get, _SphSim.SimulationBase_outflowTiming_set)
    __swig_setmethods__["dt_litesnap"] = _SphSim.SimulationBase_dt_litesnap_set
    __swig_getmethods__["dt_litesnap"] = _SphSim.SimulationBase_dt_litesnap_get
    if _newclass:dt_litesnap = _swig_property(_SphSim.SimulationBase_dt_litesnap_get, _SphSim.SimulationBase_dt_litesnap_set)
    __swig_setmethods__["dt_max"] = _SphSim.SimulationBase_dt_max_set
    __swig_getmethods__["dt_max"] = _SphSim.SimulationBase_dt_max_get
    if _newclass:dt_max = _swig_property(_SphSim.SimulationBase_dt_max_get, _SphSim.SimulationBase_dt_max_set)
    __swig_setmethods__["dt_min_nbody"] = _SphSim.SimulationBase_dt_min_nbody_set
    __swig_getmethods__["dt_min_nbody"] = _SphSim.SimulationBase_dt_min_nbody_get
    if _newclass:dt_min_nbody = _swig_property(_SphSim.SimulationBase_dt_min_nbody_get, _SphSim.SimulationBase_dt_min_nbody_set)
    __swig_setmethods__["dt_min_hydro"] = _SphSim.SimulationBase_dt_min_hydro_set
    __swig_getmethods__["dt_min_hydro"] = _SphSim.SimulationBase_dt_min_hydro_get
    if _newclass:dt_min_hydro = _swig_property(_SphSim.SimulationBase_dt_min_hydro_get, _SphSim.SimulationBase_dt_min_hydro_set)
    __swig_setmethods__["dt_python"] = _SphSim.SimulationBase_dt_python_set
    __swig_getmethods__["dt_python"] = _SphSim.SimulationBase_dt_python_get
    if _newclass:dt_python = _swig_property(_SphSim.SimulationBase_dt_python_get, _SphSim.SimulationBase_dt_python_set)
    __swig_setmethods__["dt_snap"] = _SphSim.SimulationBase_dt_snap_set
    __swig_getmethods__["dt_snap"] = _SphSim.SimulationBase_dt_snap_get
    if _newclass:dt_snap = _swig_property(_SphSim.SimulationBase_dt_snap_get, _SphSim.SimulationBase_dt_snap_set)
    __swig_setmethods__["dt_snap_wall"] = _SphSim.SimulationBase_dt_snap_wall_set
    __swig_getmethods__["dt_snap_wall"] = _SphSim.SimulationBase_dt_snap_wall_get
    if _newclass:dt_snap_wall = _swig_property(_SphSim.SimulationBase_dt_snap_wall_get, _SphSim.SimulationBase_dt_snap_wall_set)
    __swig_setmethods__["t"] = _SphSim.SimulationBase_t_set
    __swig_getmethods__["t"] = _SphSim.SimulationBase_t_get
    if _newclass:t = _swig_property(_SphSim.SimulationBase_t_get, _SphSim.SimulationBase_t_set)
    __swig_setmethods__["tmax_wallclock"] = _SphSim.SimulationBase_tmax_wallclock_set
    __swig_getmethods__["tmax_wallclock"] = _SphSim.SimulationBase_tmax_wallclock_get
    if _newclass:tmax_wallclock = _swig_property(_SphSim.SimulationBase_tmax_wallclock_get, _SphSim.SimulationBase_tmax_wallclock_set)
    __swig_setmethods__["tend"] = _SphSim.SimulationBase_tend_set
    __swig_getmethods__["tend"] = _SphSim.SimulationBase_tend_get
    if _newclass:tend = _swig_property(_SphSim.SimulationBase_tend_get, _SphSim.SimulationBase_tend_set)
    __swig_setmethods__["timestep"] = _SphSim.SimulationBase_timestep_set
    __swig_getmethods__["timestep"] = _SphSim.SimulationBase_timestep_get
    if _newclass:timestep = _swig_property(_SphSim.SimulationBase_timestep_get, _SphSim.SimulationBase_timestep_set)
    __swig_setmethods__["tsnapfirst"] = _SphSim.SimulationBase_tsnapfirst_set
    __swig_getmethods__["tsnapfirst"] = _SphSim.SimulationBase_tsnapfirst_get
    if _newclass:tsnapfirst = _swig_property(_SphSim.SimulationBase_tsnapfirst_get, _SphSim.SimulationBase_tsnapfirst_set)
    __swig_setmethods__["tsnaplast"] = _SphSim.SimulationBase_tsnaplast_set
    __swig_getmethods__["tsnaplast"] = _SphSim.SimulationBase_tsnaplast_get
    if _newclass:tsnaplast = _swig_property(_SphSim.SimulationBase_tsnaplast_get, _SphSim.SimulationBase_tsnaplast_set)
    __swig_setmethods__["tlitesnaplast"] = _SphSim.SimulationBase_tlitesnaplast_set
    __swig_getmethods__["tlitesnaplast"] = _SphSim.SimulationBase_tlitesnaplast_get
    if _newclass:tlitesnaplast = _swig_property(_SphSim.SimulationBase_tlitesnaplast_get, _SphSim.SimulationBase_tlitesnaplast_set)
    __swig_setmethods__["tlitesnapnext"] = _SphSim.SimulationBase_tlitesnapnext_set
    __swig_getmethods__["tlitesnapnext"] = _SphSim.SimulationBase_tlitesnapnext_get
    if _newclass:tlitesnapnext = _swig_property(_SphSim.SimulationBase_tlitesnapnext_get, _SphSim.SimulationBase_tlitesnapnext_set)
    __swig_setmethods__["tsnapnext"] = _SphSim.SimulationBase_tsnapnext_set
    __swig_getmethods__["tsnapnext"] = _SphSim.SimulationBase_tsnapnext_get
    if _newclass:tsnapnext = _swig_property(_SphSim.SimulationBase_tsnapnext_get, _SphSim.SimulationBase_tsnapnext_set)
    __swig_setmethods__["tsnap_wallclock"] = _SphSim.SimulationBase_tsnap_wallclock_set
    __swig_getmethods__["tsnap_wallclock"] = _SphSim.SimulationBase_tsnap_wallclock_get
    if _newclass:tsnap_wallclock = _swig_property(_SphSim.SimulationBase_tsnap_wallclock_get, _SphSim.SimulationBase_tsnap_wallclock_set)
    __swig_setmethods__["out_file_form"] = _SphSim.SimulationBase_out_file_form_set
    __swig_getmethods__["out_file_form"] = _SphSim.SimulationBase_out_file_form_get
    if _newclass:out_file_form = _swig_property(_SphSim.SimulationBase_out_file_form_get, _SphSim.SimulationBase_out_file_form_set)
    __swig_setmethods__["paramfile"] = _SphSim.SimulationBase_paramfile_set
    __swig_getmethods__["paramfile"] = _SphSim.SimulationBase_paramfile_get
    if _newclass:paramfile = _swig_property(_SphSim.SimulationBase_paramfile_get, _SphSim.SimulationBase_paramfile_set)
    __swig_setmethods__["run_id"] = _SphSim.SimulationBase_run_id_set
    __swig_getmethods__["run_id"] = _SphSim.SimulationBase_run_id_get
    if _newclass:run_id = _swig_property(_SphSim.SimulationBase_run_id_get, _SphSim.SimulationBase_run_id_set)
    __swig_setmethods__["simparams"] = _SphSim.SimulationBase_simparams_set
    __swig_getmethods__["simparams"] = _SphSim.SimulationBase_simparams_get
    if _newclass:simparams = _swig_property(_SphSim.SimulationBase_simparams_get, _SphSim.SimulationBase_simparams_set)
    __swig_setmethods__["simunits"] = _SphSim.SimulationBase_simunits_set
    __swig_getmethods__["simunits"] = _SphSim.SimulationBase_simunits_get
    if _newclass:simunits = _swig_property(_SphSim.SimulationBase_simunits_get, _SphSim.SimulationBase_simunits_set)
    __swig_setmethods__["timing"] = _SphSim.SimulationBase_timing_set
    __swig_getmethods__["timing"] = _SphSim.SimulationBase_timing_get
    if _newclass:timing = _swig_property(_SphSim.SimulationBase_timing_get, _SphSim.SimulationBase_timing_set)
    __swig_setmethods__["timestep_control"] = _SphSim.SimulationBase_timestep_control_set
    __swig_getmethods__["timestep_control"] = _SphSim.SimulationBase_timestep_control_get
    if _newclass:timestep_control = _swig_property(_SphSim.SimulationBase_timestep_control_get, _SphSim.SimulationBase_timestep_control_set)
SimulationBase_swigregister = _SphSim.SimulationBase_swigregister
SimulationBase_swigregister(SimulationBase)
cvar = _SphSim.cvar
SimulationBase.MPI = _SphSim.cvar.SimulationBase_MPI

def SimulationBase_SimulationFactory(*args):
  return _SphSim.SimulationBase_SimulationFactory(*args)
SimulationBase_SimulationFactory = _SphSim.SimulationBase_SimulationFactory

class Parameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parameters, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _SphSim.delete_Parameters
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _SphSim.new_Parameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def CheckInvalidParameters(self): return _SphSim.Parameters_CheckInvalidParameters(self)
    def ReadParamsFile(self, *args): return _SphSim.Parameters_ReadParamsFile(self, *args)
    def ParseLine(self, *args): return _SphSim.Parameters_ParseLine(self, *args)
    def SetDefaultValues(self): return _SphSim.Parameters_SetDefaultValues(self)
    def GetParameter(self, *args): return _SphSim.Parameters_GetParameter(self, *args)
    def SetParameter(self, *args): return _SphSim.Parameters_SetParameter(self, *args)
    def PrintParameters(self): return _SphSim.Parameters_PrintParameters(self)
    def RecordParametersToFile(self): return _SphSim.Parameters_RecordParametersToFile(self)
    def TrimWhiteSpace(self, *args): return _SphSim.Parameters_TrimWhiteSpace(self, *args)
    __swig_setmethods__["intparams"] = _SphSim.Parameters_intparams_set
    __swig_getmethods__["intparams"] = _SphSim.Parameters_intparams_get
    if _newclass:intparams = _swig_property(_SphSim.Parameters_intparams_get, _SphSim.Parameters_intparams_set)
    __swig_setmethods__["floatparams"] = _SphSim.Parameters_floatparams_set
    __swig_getmethods__["floatparams"] = _SphSim.Parameters_floatparams_get
    if _newclass:floatparams = _swig_property(_SphSim.Parameters_floatparams_get, _SphSim.Parameters_floatparams_set)
    __swig_setmethods__["stringparams"] = _SphSim.Parameters_stringparams_set
    __swig_getmethods__["stringparams"] = _SphSim.Parameters_stringparams_get
    if _newclass:stringparams = _swig_property(_SphSim.Parameters_stringparams_get, _SphSim.Parameters_stringparams_set)
Parameters_swigregister = _SphSim.Parameters_swigregister
Parameters_swigregister(Parameters)

class SimUnit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimUnit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimUnit, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SphSim.delete_SimUnit
    __del__ = lambda self : None;
    def SIUnit(self, *args): return _SphSim.SimUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.SimUnit_LatexLabel(self, *args)
    def OutputScale(self, *args): return _SphSim.SimUnit_OutputScale(self, *args)
    __swig_setmethods__["inscale"] = _SphSim.SimUnit_inscale_set
    __swig_getmethods__["inscale"] = _SphSim.SimUnit_inscale_get
    if _newclass:inscale = _swig_property(_SphSim.SimUnit_inscale_get, _SphSim.SimUnit_inscale_set)
    __swig_setmethods__["inSI"] = _SphSim.SimUnit_inSI_set
    __swig_getmethods__["inSI"] = _SphSim.SimUnit_inSI_get
    if _newclass:inSI = _swig_property(_SphSim.SimUnit_inSI_get, _SphSim.SimUnit_inSI_set)
    __swig_setmethods__["outcgs"] = _SphSim.SimUnit_outcgs_set
    __swig_getmethods__["outcgs"] = _SphSim.SimUnit_outcgs_get
    if _newclass:outcgs = _swig_property(_SphSim.SimUnit_outcgs_get, _SphSim.SimUnit_outcgs_set)
    __swig_setmethods__["outscale"] = _SphSim.SimUnit_outscale_set
    __swig_getmethods__["outscale"] = _SphSim.SimUnit_outscale_get
    if _newclass:outscale = _swig_property(_SphSim.SimUnit_outscale_get, _SphSim.SimUnit_outscale_set)
    __swig_setmethods__["outSI"] = _SphSim.SimUnit_outSI_set
    __swig_getmethods__["outSI"] = _SphSim.SimUnit_outSI_get
    if _newclass:outSI = _swig_property(_SphSim.SimUnit_outSI_get, _SphSim.SimUnit_outSI_set)
    __swig_setmethods__["inunit"] = _SphSim.SimUnit_inunit_set
    __swig_getmethods__["inunit"] = _SphSim.SimUnit_inunit_get
    if _newclass:inunit = _swig_property(_SphSim.SimUnit_inunit_get, _SphSim.SimUnit_inunit_set)
    __swig_setmethods__["outunit"] = _SphSim.SimUnit_outunit_set
    __swig_getmethods__["outunit"] = _SphSim.SimUnit_outunit_get
    if _newclass:outunit = _swig_property(_SphSim.SimUnit_outunit_get, _SphSim.SimUnit_outunit_set)
SimUnit_swigregister = _SphSim.SimUnit_swigregister
SimUnit_swigregister(SimUnit)

class LengthUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LengthUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LengthUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_LengthUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.LengthUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.LengthUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_LengthUnit
    __del__ = lambda self : None;
LengthUnit_swigregister = _SphSim.LengthUnit_swigregister
LengthUnit_swigregister(LengthUnit)

class MassUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_MassUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.MassUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.MassUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_MassUnit
    __del__ = lambda self : None;
MassUnit_swigregister = _SphSim.MassUnit_swigregister
MassUnit_swigregister(MassUnit)

class TimeUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_TimeUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.TimeUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.TimeUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_TimeUnit
    __del__ = lambda self : None;
TimeUnit_swigregister = _SphSim.TimeUnit_swigregister
TimeUnit_swigregister(TimeUnit)

class VelocityUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VelocityUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VelocityUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_VelocityUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.VelocityUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.VelocityUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_VelocityUnit
    __del__ = lambda self : None;
VelocityUnit_swigregister = _SphSim.VelocityUnit_swigregister
VelocityUnit_swigregister(VelocityUnit)

class AccelerationUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccelerationUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccelerationUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_AccelerationUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.AccelerationUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.AccelerationUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_AccelerationUnit
    __del__ = lambda self : None;
AccelerationUnit_swigregister = _SphSim.AccelerationUnit_swigregister
AccelerationUnit_swigregister(AccelerationUnit)

class DensityUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensityUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DensityUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_DensityUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.DensityUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.DensityUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_DensityUnit
    __del__ = lambda self : None;
DensityUnit_swigregister = _SphSim.DensityUnit_swigregister
DensityUnit_swigregister(DensityUnit)

class ColumnDensityUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColumnDensityUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColumnDensityUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_ColumnDensityUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.ColumnDensityUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.ColumnDensityUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_ColumnDensityUnit
    __del__ = lambda self : None;
ColumnDensityUnit_swigregister = _SphSim.ColumnDensityUnit_swigregister
ColumnDensityUnit_swigregister(ColumnDensityUnit)

class PressureUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PressureUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PressureUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_PressureUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.PressureUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.PressureUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_PressureUnit
    __del__ = lambda self : None;
PressureUnit_swigregister = _SphSim.PressureUnit_swigregister
PressureUnit_swigregister(PressureUnit)

class ForceUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForceUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForceUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_ForceUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.ForceUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.ForceUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_ForceUnit
    __del__ = lambda self : None;
ForceUnit_swigregister = _SphSim.ForceUnit_swigregister
ForceUnit_swigregister(ForceUnit)

class EnergyUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_EnergyUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.EnergyUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.EnergyUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_EnergyUnit
    __del__ = lambda self : None;
EnergyUnit_swigregister = _SphSim.EnergyUnit_swigregister
EnergyUnit_swigregister(EnergyUnit)

class MomentumUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MomentumUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MomentumUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_MomentumUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.MomentumUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.MomentumUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_MomentumUnit
    __del__ = lambda self : None;
MomentumUnit_swigregister = _SphSim.MomentumUnit_swigregister
MomentumUnit_swigregister(MomentumUnit)

class AngularMomentumUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngularMomentumUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AngularMomentumUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_AngularMomentumUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.AngularMomentumUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.AngularMomentumUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_AngularMomentumUnit
    __del__ = lambda self : None;
AngularMomentumUnit_swigregister = _SphSim.AngularMomentumUnit_swigregister
AngularMomentumUnit_swigregister(AngularMomentumUnit)

class AngularVelocityUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngularVelocityUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AngularVelocityUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_AngularVelocityUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.AngularVelocityUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.AngularVelocityUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_AngularVelocityUnit
    __del__ = lambda self : None;
AngularVelocityUnit_swigregister = _SphSim.AngularVelocityUnit_swigregister
AngularVelocityUnit_swigregister(AngularVelocityUnit)

class MassRateUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassRateUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassRateUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_MassRateUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.MassRateUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.MassRateUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_MassRateUnit
    __del__ = lambda self : None;
MassRateUnit_swigregister = _SphSim.MassRateUnit_swigregister
MassRateUnit_swigregister(MassRateUnit)

class LuminosityUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LuminosityUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LuminosityUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_LuminosityUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.LuminosityUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.LuminosityUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_LuminosityUnit
    __del__ = lambda self : None;
LuminosityUnit_swigregister = _SphSim.LuminosityUnit_swigregister
LuminosityUnit_swigregister(LuminosityUnit)

class OpacityUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpacityUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpacityUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_OpacityUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.OpacityUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.OpacityUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_OpacityUnit
    __del__ = lambda self : None;
OpacityUnit_swigregister = _SphSim.OpacityUnit_swigregister
OpacityUnit_swigregister(OpacityUnit)

class MagneticFieldUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MagneticFieldUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MagneticFieldUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_MagneticFieldUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.MagneticFieldUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.MagneticFieldUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_MagneticFieldUnit
    __del__ = lambda self : None;
MagneticFieldUnit_swigregister = _SphSim.MagneticFieldUnit_swigregister
MagneticFieldUnit_swigregister(MagneticFieldUnit)

class ChargeUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChargeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChargeUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_ChargeUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.ChargeUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.ChargeUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_ChargeUnit
    __del__ = lambda self : None;
ChargeUnit_swigregister = _SphSim.ChargeUnit_swigregister
ChargeUnit_swigregister(ChargeUnit)

class CurrentDensityUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurrentDensityUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurrentDensityUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_CurrentDensityUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.CurrentDensityUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.CurrentDensityUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_CurrentDensityUnit
    __del__ = lambda self : None;
CurrentDensityUnit_swigregister = _SphSim.CurrentDensityUnit_swigregister
CurrentDensityUnit_swigregister(CurrentDensityUnit)

class SpecificEnergyUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecificEnergyUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecificEnergyUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_SpecificEnergyUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.SpecificEnergyUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.SpecificEnergyUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_SpecificEnergyUnit
    __del__ = lambda self : None;
SpecificEnergyUnit_swigregister = _SphSim.SpecificEnergyUnit_swigregister
SpecificEnergyUnit_swigregister(SpecificEnergyUnit)

class SpecificEnergyRateUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecificEnergyRateUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecificEnergyRateUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_SpecificEnergyRateUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.SpecificEnergyRateUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.SpecificEnergyRateUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_SpecificEnergyRateUnit
    __del__ = lambda self : None;
SpecificEnergyRateUnit_swigregister = _SphSim.SpecificEnergyRateUnit_swigregister
SpecificEnergyRateUnit_swigregister(SpecificEnergyRateUnit)

class TemperatureUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TemperatureUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TemperatureUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_TemperatureUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.TemperatureUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.TemperatureUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_TemperatureUnit
    __del__ = lambda self : None;
TemperatureUnit_swigregister = _SphSim.TemperatureUnit_swigregister
TemperatureUnit_swigregister(TemperatureUnit)

class DimensionlessUnit(SimUnit):
    __swig_setmethods__ = {}
    for _s in [SimUnit]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DimensionlessUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [SimUnit]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DimensionlessUnit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_DimensionlessUnit()
        try: self.this.append(this)
        except: self.this = this
    def SIUnit(self, *args): return _SphSim.DimensionlessUnit_SIUnit(self, *args)
    def LatexLabel(self, *args): return _SphSim.DimensionlessUnit_LatexLabel(self, *args)
    __swig_destroy__ = _SphSim.delete_DimensionlessUnit
    __del__ = lambda self : None;
DimensionlessUnit_swigregister = _SphSim.DimensionlessUnit_swigregister
DimensionlessUnit_swigregister(DimensionlessUnit)

class SimUnits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimUnits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimUnits, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SphSim.new_SimUnits()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SphSim.delete_SimUnits
    __del__ = lambda self : None;
    def SetupUnits(self, *args): return _SphSim.SimUnits_SetupUnits(self, *args)
    def OutputScalingFactors(self, *args): return _SphSim.SimUnits_OutputScalingFactors(self, *args)
    __swig_setmethods__["dimensionless"] = _SphSim.SimUnits_dimensionless_set
    __swig_getmethods__["dimensionless"] = _SphSim.SimUnits_dimensionless_get
    if _newclass:dimensionless = _swig_property(_SphSim.SimUnits_dimensionless_get, _SphSim.SimUnits_dimensionless_set)
    __swig_setmethods__["ReadInputUnits"] = _SphSim.SimUnits_ReadInputUnits_set
    __swig_getmethods__["ReadInputUnits"] = _SphSim.SimUnits_ReadInputUnits_get
    if _newclass:ReadInputUnits = _swig_property(_SphSim.SimUnits_ReadInputUnits_get, _SphSim.SimUnits_ReadInputUnits_set)
    __swig_setmethods__["r"] = _SphSim.SimUnits_r_set
    __swig_getmethods__["r"] = _SphSim.SimUnits_r_get
    if _newclass:r = _swig_property(_SphSim.SimUnits_r_get, _SphSim.SimUnits_r_set)
    __swig_setmethods__["m"] = _SphSim.SimUnits_m_set
    __swig_getmethods__["m"] = _SphSim.SimUnits_m_get
    if _newclass:m = _swig_property(_SphSim.SimUnits_m_get, _SphSim.SimUnits_m_set)
    __swig_setmethods__["t"] = _SphSim.SimUnits_t_set
    __swig_getmethods__["t"] = _SphSim.SimUnits_t_get
    if _newclass:t = _swig_property(_SphSim.SimUnits_t_get, _SphSim.SimUnits_t_set)
    __swig_setmethods__["v"] = _SphSim.SimUnits_v_set
    __swig_getmethods__["v"] = _SphSim.SimUnits_v_get
    if _newclass:v = _swig_property(_SphSim.SimUnits_v_get, _SphSim.SimUnits_v_set)
    __swig_setmethods__["a"] = _SphSim.SimUnits_a_set
    __swig_getmethods__["a"] = _SphSim.SimUnits_a_get
    if _newclass:a = _swig_property(_SphSim.SimUnits_a_get, _SphSim.SimUnits_a_set)
    __swig_setmethods__["rho"] = _SphSim.SimUnits_rho_set
    __swig_getmethods__["rho"] = _SphSim.SimUnits_rho_get
    if _newclass:rho = _swig_property(_SphSim.SimUnits_rho_get, _SphSim.SimUnits_rho_set)
    __swig_setmethods__["sigma"] = _SphSim.SimUnits_sigma_set
    __swig_getmethods__["sigma"] = _SphSim.SimUnits_sigma_get
    if _newclass:sigma = _swig_property(_SphSim.SimUnits_sigma_get, _SphSim.SimUnits_sigma_set)
    __swig_setmethods__["press"] = _SphSim.SimUnits_press_set
    __swig_getmethods__["press"] = _SphSim.SimUnits_press_get
    if _newclass:press = _swig_property(_SphSim.SimUnits_press_get, _SphSim.SimUnits_press_set)
    __swig_setmethods__["f"] = _SphSim.SimUnits_f_set
    __swig_getmethods__["f"] = _SphSim.SimUnits_f_get
    if _newclass:f = _swig_property(_SphSim.SimUnits_f_get, _SphSim.SimUnits_f_set)
    __swig_setmethods__["E"] = _SphSim.SimUnits_E_set
    __swig_getmethods__["E"] = _SphSim.SimUnits_E_get
    if _newclass:E = _swig_property(_SphSim.SimUnits_E_get, _SphSim.SimUnits_E_set)
    __swig_setmethods__["mom"] = _SphSim.SimUnits_mom_set
    __swig_getmethods__["mom"] = _SphSim.SimUnits_mom_get
    if _newclass:mom = _swig_property(_SphSim.SimUnits_mom_get, _SphSim.SimUnits_mom_set)
    __swig_setmethods__["angmom"] = _SphSim.SimUnits_angmom_set
    __swig_getmethods__["angmom"] = _SphSim.SimUnits_angmom_get
    if _newclass:angmom = _swig_property(_SphSim.SimUnits_angmom_get, _SphSim.SimUnits_angmom_set)
    __swig_setmethods__["angvel"] = _SphSim.SimUnits_angvel_set
    __swig_getmethods__["angvel"] = _SphSim.SimUnits_angvel_get
    if _newclass:angvel = _swig_property(_SphSim.SimUnits_angvel_get, _SphSim.SimUnits_angvel_set)
    __swig_setmethods__["dmdt"] = _SphSim.SimUnits_dmdt_set
    __swig_getmethods__["dmdt"] = _SphSim.SimUnits_dmdt_get
    if _newclass:dmdt = _swig_property(_SphSim.SimUnits_dmdt_get, _SphSim.SimUnits_dmdt_set)
    __swig_setmethods__["L"] = _SphSim.SimUnits_L_set
    __swig_getmethods__["L"] = _SphSim.SimUnits_L_get
    if _newclass:L = _swig_property(_SphSim.SimUnits_L_get, _SphSim.SimUnits_L_set)
    __swig_setmethods__["kappa"] = _SphSim.SimUnits_kappa_set
    __swig_getmethods__["kappa"] = _SphSim.SimUnits_kappa_get
    if _newclass:kappa = _swig_property(_SphSim.SimUnits_kappa_get, _SphSim.SimUnits_kappa_set)
    __swig_setmethods__["B"] = _SphSim.SimUnits_B_set
    __swig_getmethods__["B"] = _SphSim.SimUnits_B_get
    if _newclass:B = _swig_property(_SphSim.SimUnits_B_get, _SphSim.SimUnits_B_set)
    __swig_setmethods__["Q"] = _SphSim.SimUnits_Q_set
    __swig_getmethods__["Q"] = _SphSim.SimUnits_Q_get
    if _newclass:Q = _swig_property(_SphSim.SimUnits_Q_get, _SphSim.SimUnits_Q_set)
    __swig_setmethods__["Jcur"] = _SphSim.SimUnits_Jcur_set
    __swig_getmethods__["Jcur"] = _SphSim.SimUnits_Jcur_get
    if _newclass:Jcur = _swig_property(_SphSim.SimUnits_Jcur_get, _SphSim.SimUnits_Jcur_set)
    __swig_setmethods__["u"] = _SphSim.SimUnits_u_set
    __swig_getmethods__["u"] = _SphSim.SimUnits_u_get
    if _newclass:u = _swig_property(_SphSim.SimUnits_u_get, _SphSim.SimUnits_u_set)
    __swig_setmethods__["dudt"] = _SphSim.SimUnits_dudt_set
    __swig_getmethods__["dudt"] = _SphSim.SimUnits_dudt_get
    if _newclass:dudt = _swig_property(_SphSim.SimUnits_dudt_get, _SphSim.SimUnits_dudt_set)
    __swig_setmethods__["temp"] = _SphSim.SimUnits_temp_set
    __swig_getmethods__["temp"] = _SphSim.SimUnits_temp_get
    if _newclass:temp = _swig_property(_SphSim.SimUnits_temp_get, _SphSim.SimUnits_temp_set)
    __swig_setmethods__["nounits"] = _SphSim.SimUnits_nounits_set
    __swig_getmethods__["nounits"] = _SphSim.SimUnits_nounits_get
    if _newclass:nounits = _swig_property(_SphSim.SimUnits_nounits_get, _SphSim.SimUnits_nounits_set)
SimUnits_swigregister = _SphSim.SimUnits_swigregister
SimUnits_swigregister(SimUnits)

noav = _SphSim.noav
mon97 = _SphSim.mon97
mon97mm97 = _SphSim.mon97mm97
mon97cd2010 = _SphSim.mon97cd2010
noac = _SphSim.noac
wadsley2008 = _SphSim.wadsley2008
price2008 = _SphSim.price2008
notdav = _SphSim.notdav
mm97 = _SphSim.mm97
cd2010 = _SphSim.cd2010
class Species(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Species, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Species, name)
    __repr__ = _swig_repr
    __swig_setmethods__["values"] = _SphSim.Species_values_set
    __swig_getmethods__["values"] = _SphSim.Species_values_get
    if _newclass:values = _swig_property(_SphSim.Species_values_get, _SphSim.Species_values_set)
    __swig_setmethods__["N"] = _SphSim.Species_N_set
    __swig_getmethods__["N"] = _SphSim.Species_N_get
    if _newclass:N = _swig_property(_SphSim.Species_N_get, _SphSim.Species_N_set)
    __swig_setmethods__["name"] = _SphSim.Species_name_set
    __swig_getmethods__["name"] = _SphSim.Species_name_get
    if _newclass:name = _swig_property(_SphSim.Species_name_get, _SphSim.Species_name_set)
    def __init__(self, *args): 
        this = _SphSim.new_Species(*args)
        try: self.this.append(this)
        except: self.this = this
    def DeallocateMemory(self): return _SphSim.Species_DeallocateMemory(self)
    def IsAllocated(self): return _SphSim.Species_IsAllocated(self)
    def CalculateMemoryUsage(self): return _SphSim.Species_CalculateMemoryUsage(self)
    def CalculatePredictedMemoryUsage(self): return _SphSim.Species_CalculatePredictedMemoryUsage(self)
    __swig_destroy__ = _SphSim.delete_Species
    __del__ = lambda self : None;
Species_swigregister = _SphSim.Species_swigregister
Species_swigregister(Species)

class SphSnapshotBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphSnapshotBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SphSnapshotBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["SphSnapshotFactory"] = lambda x: _SphSim.SphSnapshotBase_SphSnapshotFactory
    if _newclass:SphSnapshotFactory = staticmethod(_SphSim.SphSnapshotBase_SphSnapshotFactory)
    def DeallocateBufferMemory(self): return _SphSim.SphSnapshotBase_DeallocateBufferMemory(self)
    def CalculateMemoryUsage(self): return _SphSim.SphSnapshotBase_CalculateMemoryUsage(self)
    def CalculatePredictedMemoryUsage(self): return _SphSim.SphSnapshotBase_CalculatePredictedMemoryUsage(self)
    def CopyDataFromSimulation(self): return _SphSim.SphSnapshotBase_CopyDataFromSimulation(self)
    def ExtractArray(self, *args): return _SphSim.SphSnapshotBase_ExtractArray(self, *args)
    def ReadSnapshot(self, *args): return _SphSim.SphSnapshotBase_ReadSnapshot(self, *args)
    def GetNTypes(self): return _SphSim.SphSnapshotBase_GetNTypes(self)
    def GetSpecies(self, *args): return _SphSim.SphSnapshotBase_GetSpecies(self, *args)
    def GetRealType(self, *args): return _SphSim.SphSnapshotBase_GetRealType(self, *args)
    def GetNparticlesType(self, *args): return _SphSim.SphSnapshotBase_GetNparticlesType(self, *args)
    __swig_setmethods__["allocated"] = _SphSim.SphSnapshotBase_allocated_set
    __swig_getmethods__["allocated"] = _SphSim.SphSnapshotBase_allocated_get
    if _newclass:allocated = _swig_property(_SphSim.SphSnapshotBase_allocated_get, _SphSim.SphSnapshotBase_allocated_set)
    __swig_setmethods__["LastUsed"] = _SphSim.SphSnapshotBase_LastUsed_set
    __swig_getmethods__["LastUsed"] = _SphSim.SphSnapshotBase_LastUsed_get
    if _newclass:LastUsed = _swig_property(_SphSim.SphSnapshotBase_LastUsed_get, _SphSim.SphSnapshotBase_LastUsed_set)
    __swig_setmethods__["ndim"] = _SphSim.SphSnapshotBase_ndim_set
    __swig_getmethods__["ndim"] = _SphSim.SphSnapshotBase_ndim_get
    if _newclass:ndim = _swig_property(_SphSim.SphSnapshotBase_ndim_get, _SphSim.SphSnapshotBase_ndim_set)
    __swig_setmethods__["t"] = _SphSim.SphSnapshotBase_t_set
    __swig_getmethods__["t"] = _SphSim.SphSnapshotBase_t_get
    if _newclass:t = _swig_property(_SphSim.SphSnapshotBase_t_get, _SphSim.SphSnapshotBase_t_set)
    __swig_setmethods__["filename"] = _SphSim.SphSnapshotBase_filename_set
    __swig_getmethods__["filename"] = _SphSim.SphSnapshotBase_filename_get
    if _newclass:filename = _swig_property(_SphSim.SphSnapshotBase_filename_get, _SphSim.SphSnapshotBase_filename_set)
    __swig_setmethods__["fileform"] = _SphSim.SphSnapshotBase_fileform_set
    __swig_getmethods__["fileform"] = _SphSim.SphSnapshotBase_fileform_get
    if _newclass:fileform = _swig_property(_SphSim.SphSnapshotBase_fileform_get, _SphSim.SphSnapshotBase_fileform_set)
    __swig_setmethods__["label"] = _SphSim.SphSnapshotBase_label_set
    __swig_getmethods__["label"] = _SphSim.SphSnapshotBase_label_get
    if _newclass:label = _swig_property(_SphSim.SphSnapshotBase_label_get, _SphSim.SphSnapshotBase_label_set)
    __swig_setmethods__["units"] = _SphSim.SphSnapshotBase_units_set
    __swig_getmethods__["units"] = _SphSim.SphSnapshotBase_units_get
    if _newclass:units = _swig_property(_SphSim.SphSnapshotBase_units_get, _SphSim.SphSnapshotBase_units_set)
    __swig_destroy__ = _SphSim.delete_SphSnapshotBase
    __del__ = lambda self : None;
SphSnapshotBase_swigregister = _SphSim.SphSnapshotBase_swigregister
SphSnapshotBase_swigregister(SphSnapshotBase)

def SphSnapshotBase_SphSnapshotFactory(*args):
  return _SphSim.SphSnapshotBase_SphSnapshotFactory(*args)
SphSnapshotBase_SphSnapshotFactory = _SphSim.SphSnapshotBase_SphSnapshotFactory

class RenderBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SphSim.delete_RenderBase
    __del__ = lambda self : None;
    __swig_getmethods__["RenderFactory"] = lambda x: _SphSim.RenderBase_RenderFactory
    if _newclass:RenderFactory = staticmethod(_SphSim.RenderBase_RenderFactory)
    def CreateColumnRenderingGrid(self, *args): return _SphSim.RenderBase_CreateColumnRenderingGrid(self, *args)
    def CreateSliceRenderingGrid(self, *args): return _SphSim.RenderBase_CreateSliceRenderingGrid(self, *args)
    single = _SphSim.RenderBase_single
RenderBase_swigregister = _SphSim.RenderBase_swigregister
RenderBase_swigregister(RenderBase)

def RenderBase_RenderFactory(*args):
  return _SphSim.RenderBase_RenderFactory(*args)
RenderBase_RenderFactory = _SphSim.RenderBase_RenderFactory

class UnitInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _SphSim.UnitInfo_label_set
    __swig_getmethods__["label"] = _SphSim.UnitInfo_label_get
    if _newclass:label = _swig_property(_SphSim.UnitInfo_label_get, _SphSim.UnitInfo_label_set)
    __swig_setmethods__["name"] = _SphSim.UnitInfo_name_set
    __swig_getmethods__["name"] = _SphSim.UnitInfo_name_get
    if _newclass:name = _swig_property(_SphSim.UnitInfo_name_get, _SphSim.UnitInfo_name_set)
    def __init__(self): 
        this = _SphSim.new_UnitInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SphSim.delete_UnitInfo
    __del__ = lambda self : None;
UnitInfo_swigregister = _SphSim.UnitInfo_swigregister
UnitInfo_swigregister(UnitInfo)

# This file is compatible with both classic and new-style classes.


